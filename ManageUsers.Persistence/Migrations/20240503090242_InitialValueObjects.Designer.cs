// <auto-generated />
using System;
using System.Collections.Generic;
using ManageUsers.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManageUsers.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240503090242_InitialValueObjects")]
    partial class InitialValueObjects
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManageUsers.Domain.Administrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "ManageUsers.Domain.Administrator.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstNameDomainErrors")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstNameDomainErrors");

                            b1.Property<string>("LastNameDomainErrors")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastNameDomainErrors");

                            b1.Property<string>("PatronymicDomainErrors")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PatronymicDomainErrors");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Administrators", (string)null);
                });

            modelBuilder.Entity("ManageUsers.Domain.ApplicationUserDomainErrors", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApplicationUserRoleEnum")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationUserId");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("0f8fad5b-d9cb-469f-a165-70867728950a"),
                            ApplicationUserRole = 1,
                            Login = "$MYHASH$V1$10000$+X4Aw24Ud2+zdOsZVfe7S8tvhB2v4gKHMSrUFhWWVO8yZoSv",
                            PasswordHash = "Admin"
                        },
                        new
                        {
                            ApplicationUserId = new Guid("0f8fad5b-d9cb-469f-a165-70867728950d"),
                            ApplicationUserRole = 3,
                            Login = "$MYHASH$V1$10000$+X4Aw24Ud2+zdOsZVfe7S8tvhB2v4gKHMSrUFhWWVO8yZoSv",
                            PasswordHash = "Doctor1"
                        },
                        new
                        {
                            ApplicationUserId = new Guid("0f8fad5b-d9cb-469f-a165-70867728950b"),
                            ApplicationUserRole = 2,
                            Login = "$MYHASH$V1$10000$+X4Aw24Ud2+zdOsZVfe7S8tvhB2v4gKHMSrUFhWWVO8yZoSv",
                            PasswordHash = "Patient1"
                        });
                });

            modelBuilder.Entity("ManageUsers.Domain.DoctorDomainErrors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CabinetNumber")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateBirthday")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumberDomainErrors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "ManageUsers.Domain.DoctorDomainErrors.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstNameDomainErrors")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstNameDomainErrors");

                            b1.Property<string>("LastNameDomainErrors")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastNameDomainErrors");

                            b1.Property<string>("PatronymicDomainErrors")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PatronymicDomainErrors");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ManageUsers.Domain.PatientDomainErrors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateBirthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumberDomainErrors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "ManageUsers.Domain.PatientDomainErrors.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstNameDomainErrors")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstNameDomainErrors");

                            b1.Property<string>("LastNameDomainErrors")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastNameDomainErrors");

                            b1.Property<string>("PatronymicDomainErrors")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PatronymicDomainErrors");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("ManageUsers.Domain.Administrator", b =>
                {
                    b.HasOne("ManageUsers.Domain.ApplicationUserDomainErrors", "ApplicationUserDomainErrors")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserDomainErrors");
                });

            modelBuilder.Entity("ManageUsers.Domain.DoctorDomainErrors", b =>
                {
                    b.HasOne("ManageUsers.Domain.ApplicationUserDomainErrors", "ApplicationUserDomainErrors")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserDomainErrors");
                });

            modelBuilder.Entity("ManageUsers.Domain.PatientDomainErrors", b =>
                {
                    b.HasOne("ManageUsers.Domain.ApplicationUserDomainErrors", "ApplicationUserDomainErrors")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserDomainErrors");
                });
#pragma warning restore 612, 618
        }
    }
}
